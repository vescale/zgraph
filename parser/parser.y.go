// Code generated by goyacc DO NOT EDIT.

// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"

import (
	"math"

	"github.com/vescale/zgraph/datum"
	"github.com/vescale/zgraph/parser/ast"
	"github.com/vescale/zgraph/parser/model"
	"github.com/vescale/zgraph/parser/opcode"
)

type yySymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault          = 57493
	yyEOFCode          = 57344
	abs                = 57454
	all                = 57418
	allDifferent       = 57461
	allProp            = 57476
	and                = 57392
	andand             = 57351
	andnot             = 57467
	any                = 57419
	arrayAgg           = 57432
	as                 = 57353
	asc                = 57354
	assignmentEq       = 57468
	avg                = 57433
	begin              = 57402
	between            = 57393
	bitLit             = 57466
	booleanType        = 57406
	by                 = 57355
	caseKwd            = 57396
	cast               = 57442
	ceil               = 57455
	ceiling            = 57456
	cheapest           = 57421
	comment            = 57404
	commit             = 57405
	cost               = 57423
	count              = 57434
	create             = 57356
	dateType           = 57410
	day                = 57411
	decLit             = 57463
	decimalType        = 57407
	defaultKwd         = 57357
	deleteKwd          = 57358
	desc               = 57359
	distinct           = 57401
	div                = 57490
	doubleAtIdentifier = 57349
	doubleType         = 57360
	drop               = 57361
	edge               = 57362
	edgeIncomingLeft   = 57481
	edgeIncomingRight  = 57482
	edgeOutgoingLeft   = 57479
	edgeOutgoingRight  = 57480
	elementNumber      = 57457
	elseKwd            = 57399
	empty              = 57487
	end                = 57403
	eq                 = 57469
	yyErrCode          = 57345
	exists             = 57363
	explain            = 57408
	extract            = 57439
	falseKwd           = 57364
	floatLit           = 57462
	floatType          = 57365
	floor              = 57458
	forkKwd            = 57431
	from               = 57366
	ge                 = 57470
	graph              = 57416
	graphs             = 57417
	group              = 57367
	hasLabel           = 57459
	having             = 57368
	hexLit             = 57465
	hour               = 57426
	id                 = 57460
	identifier         = 57346
	ifKwd              = 57369
	in                 = 57400
	inDegree           = 57449
	index              = 57370
	insert             = 57371
	intLit             = 57464
	integerType        = 57372
	interval           = 57425
	into               = 57373
	invalid            = 57350
	is                 = 57374
	javaRegexpLike     = 57450
	label              = 57451
	labels             = 57394
	le                 = 57471
	leftArrow          = 57477
	limit              = 57375
	listagg            = 57435
	lower              = 57447
	lowerThanOn        = 57488
	match              = 57376
	matchNumber        = 57452
	max                = 57436
	min                = 57437
	minute             = 57427
	mod                = 57491
	month              = 57428
	neg                = 57492
	neq                = 57472
	neqSynonym         = 57473
	not                = 57377
	null               = 57378
	nulleq             = 57474
	offset             = 57415
	on                 = 57379
	or                 = 57391
	order              = 57380
	outDegree          = 57453
	paramMarker        = 57475
	path               = 57424
	pipes              = 57352
	pipesAsOr          = 57489
	prefix             = 57446
	properties         = 57395
	reachIncomingLeft  = 57485
	reachIncomingRight = 57486
	reachOutgoingLeft  = 57483
	reachOutgoingRight = 57484
	rightArrow         = 57478
	rollback           = 57414
	second             = 57429
	selectKwd          = 57381
	set                = 57382
	shortest           = 57420
	show               = 57383
	singleAtIdentifier = 57348
	stringKwd          = 57443
	stringLit          = 57347
	substring          = 57430
	sum                = 57438
	then               = 57397
	timeType           = 57413
	timestampType      = 57412
	timezoneHour       = 57440
	timezoneMinute     = 57441
	top                = 57422
	trueKwd            = 57384
	unique             = 57385
	update             = 57386
	uppper             = 57448
	use                = 57387
	vertex             = 57388
	when               = 57398
	where              = 57389
	with               = 57444
	xor                = 57390
	yearType           = 57409
	zone               = 57445

	yyMaxDepth = 200
	yyTabOfs   = -365
)

var (
	yyXLAT = map[int]int{
		41:    0,   // ')' (280x)
		57424: 1,   // path (276x)
		57344: 2,   // $end (275x)
		59:    3,   // ';' (274x)
		57423: 4,   // cost (264x)
		57403: 5,   // end (260x)
		57431: 6,   // forkKwd (254x)
		44:    7,   // ',' (247x)
		45:    8,   // '-' (244x)
		57377: 9,   // not (237x)
		57375: 10,  // limit (227x)
		57380: 11,  // order (222x)
		57368: 12,  // having (217x)
		57367: 13,  // group (201x)
		57366: 14,  // from (198x)
		42:    15,  // '*' (195x)
		43:    16,  // '+' (193x)
		57374: 17,  // is (190x)
		57400: 18,  // in (181x)
		57392: 19,  // and (180x)
		57469: 20,  // eq (180x)
		37:    21,  // '%' (179x)
		47:    22,  // '/' (179x)
		60:    23,  // '<' (179x)
		62:    24,  // '>' (179x)
		57470: 25,  // ge (179x)
		57471: 26,  // le (179x)
		57473: 27,  // neqSynonym (179x)
		57391: 28,  // or (179x)
		57352: 29,  // pipes (179x)
		57390: 30,  // xor (179x)
		57381: 31,  // selectKwd (178x)
		40:    32,  // '(' (177x)
		57358: 33,  // deleteKwd (174x)
		57371: 34,  // insert (174x)
		57386: 35,  // update (174x)
		57398: 36,  // when (158x)
		57354: 37,  // asc (157x)
		57359: 38,  // desc (157x)
		57399: 39,  // elseKwd (156x)
		57353: 40,  // as (155x)
		57397: 41,  // then (152x)
		57421: 42,  // cheapest (106x)
		57394: 43,  // labels (106x)
		57420: 44,  // shortest (106x)
		57415: 45,  // offset (105x)
		57418: 46,  // all (104x)
		57419: 47,  // any (104x)
		57413: 48,  // timeType (104x)
		57422: 49,  // top (104x)
		57402: 50,  // begin (103x)
		57405: 51,  // commit (103x)
		57411: 52,  // day (103x)
		57408: 53,  // explain (103x)
		57416: 54,  // graph (103x)
		57426: 55,  // hour (103x)
		57427: 56,  // minute (103x)
		57428: 57,  // month (103x)
		57414: 58,  // rollback (103x)
		57429: 59,  // second (103x)
		57444: 60,  // with (103x)
		57409: 61,  // yearType (103x)
		57445: 62,  // zone (103x)
		57406: 63,  // booleanType (102x)
		57410: 64,  // dateType (102x)
		57446: 65,  // prefix (102x)
		57443: 66,  // stringKwd (102x)
		57412: 67,  // timestampType (102x)
		57440: 68,  // timezoneHour (102x)
		57441: 69,  // timezoneMinute (102x)
		57432: 70,  // arrayAgg (101x)
		57433: 71,  // avg (101x)
		57442: 72,  // cast (101x)
		57434: 73,  // count (101x)
		57439: 74,  // extract (101x)
		57346: 75,  // identifier (101x)
		57425: 76,  // interval (101x)
		57435: 77,  // listagg (101x)
		57436: 78,  // max (101x)
		57437: 79,  // min (101x)
		57430: 80,  // substring (101x)
		57438: 81,  // sum (101x)
		57389: 82,  // where (100x)
		57548: 83,  // Identifier (82x)
		57617: 84,  // UnReservedKeyword (82x)
		57464: 85,  // intLit (65x)
		46:    86,  // '.' (63x)
		57347: 87,  // stringLit (62x)
		57623: 88,  // VariableName (62x)
		57475: 89,  // paramMarker (61x)
		57486: 90,  // reachIncomingRight (60x)
		123:   91,  // '{' (58x)
		57466: 92,  // bitLit (58x)
		57363: 93,  // exists (58x)
		57465: 94,  // hexLit (58x)
		57451: 95,  // label (58x)
		57484: 96,  // reachOutgoingRight (58x)
		57482: 97,  // edgeIncomingRight (57x)
		58:    98,  // ':' (56x)
		63:    99,  // '?' (56x)
		57454: 100, // abs (56x)
		57461: 101, // allDifferent (56x)
		57396: 102, // caseKwd (56x)
		57455: 103, // ceil (56x)
		57456: 104, // ceiling (56x)
		57463: 105, // decLit (56x)
		57457: 106, // elementNumber (56x)
		57364: 107, // falseKwd (56x)
		57462: 108, // floatLit (56x)
		57458: 109, // floor (56x)
		57459: 110, // hasLabel (56x)
		57460: 111, // id (56x)
		57449: 112, // inDegree (56x)
		57450: 113, // javaRegexpLike (56x)
		57447: 114, // lower (56x)
		57452: 115, // matchNumber (56x)
		57453: 116, // outDegree (56x)
		57384: 117, // trueKwd (56x)
		57448: 118, // uppper (56x)
		57480: 119, // edgeOutgoingRight (55x)
		57395: 120, // properties (52x)
		57362: 121, // edge (50x)
		57590: 122, // PropertyAccess (50x)
		57388: 123, // vertex (50x)
		57613: 124, // StringLiteral (49x)
		124:   125, // '|' (48x)
		57393: 126, // between (48x)
		57614: 127, // Subquery (48x)
		57494: 128, // Aggregation (47x)
		57497: 129, // ArithmeticExpression (47x)
		57499: 130, // BindVariable (47x)
		57500: 131, // BooleanLiteral (47x)
		57501: 132, // BracketedValueExpression (47x)
		57504: 133, // CaseExpression (47x)
		57505: 134, // CastSpecification (47x)
		57506: 135, // CharacterSubstring (47x)
		57515: 136, // DateLiteral (47x)
		57526: 137, // ExistsPredicate (47x)
		57530: 138, // ExtractFunction (47x)
		57536: 139, // FunctionInvocation (47x)
		57537: 140, // FunctionName (47x)
		57551: 141, // InPredicate (47x)
		57556: 142, // IntervalLiteral (47x)
		57559: 143, // IsNotNullPredicate (47x)
		57560: 144, // IsNullPredicate (47x)
		57573: 145, // Literal (47x)
		57574: 146, // LogicalExpression (47x)
		57577: 147, // NotInPredicate (47x)
		57578: 148, // NumericLiteral (47x)
		57597: 149, // RelationalExpression (47x)
		57600: 150, // ScalarSubquery (47x)
		57601: 151, // SearchedCase (47x)
		57607: 152, // SimpleCase (47x)
		57612: 153, // StringConcat (47x)
		57615: 154, // TimeLiteral (47x)
		57616: 155, // TimestampLiteral (47x)
		57620: 156, // ValueExpression (47x)
		57626: 157, // VariableReference (47x)
		57382: 158, // set (46x)
		57476: 159, // allProp (45x)
		57628: 160, // VertexPattern (19x)
		57379: 161, // on (17x)
		57622: 162, // VariableLengthPathPattern (10x)
		57481: 163, // edgeIncomingLeft (9x)
		57479: 164, // edgeOutgoingLeft (9x)
		57477: 165, // leftArrow (9x)
		57478: 166, // rightArrow (9x)
		57401: 167, // distinct (8x)
		57518: 168, // DistinctOpt (8x)
		57542: 169, // GraphName (6x)
		57369: 170, // ifKwd (6x)
		57561: 171, // LabelName (6x)
		57583: 172, // PathPatternMacro (6x)
		57625: 173, // VariableNameOpt (6x)
		57632: 174, // WhereClauseOpt (6x)
		57527: 175, // ExpAsVar (5x)
		57584: 176, // PathPatternMacroList (5x)
		57585: 177, // PathPatternMacroOpt (5x)
		57485: 178, // reachIncomingLeft (5x)
		57483: 179, // reachOutgoingLeft (5x)
		57605: 180, // SelectStmt (5x)
		125:   181, // '}' (4x)
		57534: 182, // FromClause (4x)
		57546: 183, // GroupByClauseOpt (4x)
		57547: 184, // HavingClauseOpt (4x)
		57370: 185, // index (4x)
		57570: 186, // LimitClauseOpt (4x)
		57580: 187, // OrderByClauseOpt (4x)
		57581: 188, // PathPattern (4x)
		57586: 189, // PatternQuantifier (4x)
		57587: 190, // PatternQuantifierOpt (4x)
		57608: 191, // SimplePathPattern (4x)
		57627: 192, // VariableSpec (4x)
		57630: 193, // WhenClause (4x)
		57502: 194, // ByItem (3x)
		57507: 195, // ColonOrIsKeyword (3x)
		57522: 196, // EdgePattern (3x)
		57549: 197, // IfExists (3x)
		57550: 198, // IfNotExists (3x)
		57564: 199, // LabelPredicate (3x)
		57569: 200, // LengthNum (3x)
		57571: 201, // LimitOption (3x)
		57591: 202, // PropertyAssignment (3x)
		57593: 203, // PropertyName (3x)
		57498: 204, // BeginStmt (2x)
		57355: 205, // by (2x)
		57503: 206, // ByList (2x)
		57508: 207, // CommitStmt (2x)
		57356: 208, // create (2x)
		57511: 209, // CreateGraphStmt (2x)
		57512: 210, // CreateIndexStmt (2x)
		57513: 211, // CreateLabelStmt (2x)
		57517: 212, // DeleteStmt (2x)
		57361: 213, // drop (2x)
		57519: 214, // DropGraphStmt (2x)
		57520: 215, // DropIndexStmt (2x)
		57521: 216, // DropLabelStmt (2x)
		57523: 217, // ElseClauseOpt (2x)
		57524: 218, // EmptyStmt (2x)
		57528: 219, // ExplainStmt (2x)
		57538: 220, // GraphElementInsertion (2x)
		57540: 221, // GraphElementUpdate (2x)
		57555: 222, // InsertStmt (2x)
		57552: 223, // InValueList (2x)
		57568: 224, // LabelsAndProperties (2x)
		57566: 225, // LabelSpecification (2x)
		57567: 226, // LabelSpecificationOpt (2x)
		57376: 227, // match (2x)
		57575: 228, // MatchClause (2x)
		57378: 229, // null (2x)
		57592: 230, // PropertyAssignmentList (2x)
		57598: 231, // RollbackStmt (2x)
		57602: 232, // SelectClause (2x)
		57603: 233, // SelectEelement (2x)
		57383: 234, // show (2x)
		57606: 235, // ShowStmt (2x)
		57610: 236, // Statement (2x)
		57618: 237, // UpdateStmt (2x)
		57387: 238, // use (2x)
		57619: 239, // UseStmt (2x)
		57629: 240, // VertexPatternOpt (2x)
		57631: 241, // WhenClauseList (2x)
		57495: 242, // AllPropertiesPrefixOpt (1x)
		57496: 243, // ArgumentList (1x)
		57509: 244, // CostClause (1x)
		57510: 245, // CostClauseOpt (1x)
		57514: 246, // DataType (1x)
		57516: 247, // DateTimeField (1x)
		57407: 248, // decimalType (1x)
		57360: 249, // doubleType (1x)
		57525: 250, // Entry (1x)
		57529: 251, // ExtractField (1x)
		57531: 252, // FieldAsName (1x)
		57532: 253, // FieldAsNameOpt (1x)
		57365: 254, // floatType (1x)
		57533: 255, // ForStringLengthOpt (1x)
		57535: 256, // FromClauseOpt (1x)
		57539: 257, // GraphElementInsertionList (1x)
		57541: 258, // GraphElementUpdateList (1x)
		57543: 259, // GraphOnClause (1x)
		57544: 260, // GraphOnClauseOpt (1x)
		57545: 261, // GraphPattern (1x)
		57417: 262, // graphs (1x)
		57553: 263, // IndexKeyTypeOpt (1x)
		57554: 264, // IndexName (1x)
		57372: 265, // integerType (1x)
		57373: 266, // into (1x)
		57557: 267, // IntoClause (1x)
		57558: 268, // IntoClauseOpt (1x)
		57562: 269, // LabelNameList (1x)
		57563: 270, // LabelNameListWithComma (1x)
		57565: 271, // LabelPredicateOpt (1x)
		57572: 272, // ListaggSeparatorOpt (1x)
		57576: 273, // MatchClauseList (1x)
		57579: 274, // Order (1x)
		57582: 275, // PathPatternList (1x)
		57588: 276, // PropertiesSpecification (1x)
		57589: 277, // PropertiesSpecificationOpt (1x)
		57594: 278, // PropertyNameList (1x)
		57595: 279, // QuantifiedPathExpr (1x)
		57596: 280, // ReachabilityPathExpr (1x)
		57599: 281, // RowsPerMatchOpt (1x)
		57604: 282, // SelectElementList (1x)
		57609: 283, // StartPosition (1x)
		57611: 284, // StatementList (1x)
		57385: 285, // unique (1x)
		57621: 286, // ValueExpressionList (1x)
		57624: 287, // VariableNameList (1x)
		57493: 288, // $default (0x)
		38:    289, // '&' (0x)
		94:    290, // '^' (0x)
		126:   291, // '~' (0x)
		57351: 292, // andand (0x)
		57467: 293, // andnot (0x)
		57468: 294, // assignmentEq (0x)
		57404: 295, // comment (0x)
		57357: 296, // defaultKwd (0x)
		57490: 297, // div (0x)
		57349: 298, // doubleAtIdentifier (0x)
		57487: 299, // empty (0x)
		57345: 300, // error (0x)
		57350: 301, // invalid (0x)
		57488: 302, // lowerThanOn (0x)
		57491: 303, // mod (0x)
		57492: 304, // neg (0x)
		57472: 305, // neq (0x)
		57474: 306, // nulleq (0x)
		57489: 307, // pipesAsOr (0x)
		57348: 308, // singleAtIdentifier (0x)
	}

	yySymNames = []string{
		"')'",
		"path",
		"$end",
		"';'",
		"cost",
		"end",
		"forkKwd",
		"','",
		"'-'",
		"not",
		"limit",
		"order",
		"having",
		"group",
		"from",
		"'*'",
		"'+'",
		"is",
		"in",
		"and",
		"eq",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"ge",
		"le",
		"neqSynonym",
		"or",
		"pipes",
		"xor",
		"selectKwd",
		"'('",
		"deleteKwd",
		"insert",
		"update",
		"when",
		"asc",
		"desc",
		"elseKwd",
		"as",
		"then",
		"cheapest",
		"labels",
		"shortest",
		"offset",
		"all",
		"any",
		"timeType",
		"top",
		"begin",
		"commit",
		"day",
		"explain",
		"graph",
		"hour",
		"minute",
		"month",
		"rollback",
		"second",
		"with",
		"yearType",
		"zone",
		"booleanType",
		"dateType",
		"prefix",
		"stringKwd",
		"timestampType",
		"timezoneHour",
		"timezoneMinute",
		"arrayAgg",
		"avg",
		"cast",
		"count",
		"extract",
		"identifier",
		"interval",
		"listagg",
		"max",
		"min",
		"substring",
		"sum",
		"where",
		"Identifier",
		"UnReservedKeyword",
		"intLit",
		"'.'",
		"stringLit",
		"VariableName",
		"paramMarker",
		"reachIncomingRight",
		"'{'",
		"bitLit",
		"exists",
		"hexLit",
		"label",
		"reachOutgoingRight",
		"edgeIncomingRight",
		"':'",
		"'?'",
		"abs",
		"allDifferent",
		"caseKwd",
		"ceil",
		"ceiling",
		"decLit",
		"elementNumber",
		"falseKwd",
		"floatLit",
		"floor",
		"hasLabel",
		"id",
		"inDegree",
		"javaRegexpLike",
		"lower",
		"matchNumber",
		"outDegree",
		"trueKwd",
		"uppper",
		"edgeOutgoingRight",
		"properties",
		"edge",
		"PropertyAccess",
		"vertex",
		"StringLiteral",
		"'|'",
		"between",
		"Subquery",
		"Aggregation",
		"ArithmeticExpression",
		"BindVariable",
		"BooleanLiteral",
		"BracketedValueExpression",
		"CaseExpression",
		"CastSpecification",
		"CharacterSubstring",
		"DateLiteral",
		"ExistsPredicate",
		"ExtractFunction",
		"FunctionInvocation",
		"FunctionName",
		"InPredicate",
		"IntervalLiteral",
		"IsNotNullPredicate",
		"IsNullPredicate",
		"Literal",
		"LogicalExpression",
		"NotInPredicate",
		"NumericLiteral",
		"RelationalExpression",
		"ScalarSubquery",
		"SearchedCase",
		"SimpleCase",
		"StringConcat",
		"TimeLiteral",
		"TimestampLiteral",
		"ValueExpression",
		"VariableReference",
		"set",
		"allProp",
		"VertexPattern",
		"on",
		"VariableLengthPathPattern",
		"edgeIncomingLeft",
		"edgeOutgoingLeft",
		"leftArrow",
		"rightArrow",
		"distinct",
		"DistinctOpt",
		"GraphName",
		"ifKwd",
		"LabelName",
		"PathPatternMacro",
		"VariableNameOpt",
		"WhereClauseOpt",
		"ExpAsVar",
		"PathPatternMacroList",
		"PathPatternMacroOpt",
		"reachIncomingLeft",
		"reachOutgoingLeft",
		"SelectStmt",
		"'}'",
		"FromClause",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"index",
		"LimitClauseOpt",
		"OrderByClauseOpt",
		"PathPattern",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"SimplePathPattern",
		"VariableSpec",
		"WhenClause",
		"ByItem",
		"ColonOrIsKeyword",
		"EdgePattern",
		"IfExists",
		"IfNotExists",
		"LabelPredicate",
		"LengthNum",
		"LimitOption",
		"PropertyAssignment",
		"PropertyName",
		"BeginStmt",
		"by",
		"ByList",
		"CommitStmt",
		"create",
		"CreateGraphStmt",
		"CreateIndexStmt",
		"CreateLabelStmt",
		"DeleteStmt",
		"drop",
		"DropGraphStmt",
		"DropIndexStmt",
		"DropLabelStmt",
		"ElseClauseOpt",
		"EmptyStmt",
		"ExplainStmt",
		"GraphElementInsertion",
		"GraphElementUpdate",
		"InsertStmt",
		"InValueList",
		"LabelsAndProperties",
		"LabelSpecification",
		"LabelSpecificationOpt",
		"match",
		"MatchClause",
		"null",
		"PropertyAssignmentList",
		"RollbackStmt",
		"SelectClause",
		"SelectEelement",
		"show",
		"ShowStmt",
		"Statement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"VertexPatternOpt",
		"WhenClauseList",
		"AllPropertiesPrefixOpt",
		"ArgumentList",
		"CostClause",
		"CostClauseOpt",
		"DataType",
		"DateTimeField",
		"decimalType",
		"doubleType",
		"Entry",
		"ExtractField",
		"FieldAsName",
		"FieldAsNameOpt",
		"floatType",
		"ForStringLengthOpt",
		"FromClauseOpt",
		"GraphElementInsertionList",
		"GraphElementUpdateList",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"graphs",
		"IndexKeyTypeOpt",
		"IndexName",
		"integerType",
		"into",
		"IntoClause",
		"IntoClauseOpt",
		"LabelNameList",
		"LabelNameListWithComma",
		"LabelPredicateOpt",
		"ListaggSeparatorOpt",
		"MatchClauseList",
		"Order",
		"PathPatternList",
		"PropertiesSpecification",
		"PropertiesSpecificationOpt",
		"PropertyNameList",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectElementList",
		"StartPosition",
		"StatementList",
		"unique",
		"ValueExpressionList",
		"VariableNameList",
		"$default",
		"'&'",
		"'^'",
		"'~'",
		"andand",
		"andnot",
		"assignmentEq",
		"comment",
		"defaultKwd",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"invalid",
		"lowerThanOn",
		"mod",
		"neg",
		"neq",
		"nulleq",
		"pipesAsOr",
		"singleAtIdentifier",
	}

	yyReductions = []struct{ xsym, components int }{
		{0, 1},
		{250, 1},
		{284, 1},
		{284, 3},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{236, 1},
		{218, 0},
		{204, 1},
		{207, 1},
		{209, 4},
		{211, 4},
		{210, 8},
		{263, 0},
		{263, 1},
		{212, 9},
		{214, 4},
		{216, 4},
		{215, 4},
		{219, 2},
		{222, 10},
		{268, 0},
		{268, 1},
		{267, 2},
		{257, 1},
		{257, 3},
		{220, 3},
		{220, 7},
		{224, 2},
		{226, 0},
		{226, 1},
		{225, 4},
		{277, 0},
		{277, 1},
		{276, 4},
		{230, 1},
		{230, 3},
		{202, 3},
		{122, 3},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{157, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{124, 1},
		{124, 1},
		{124, 1},
		{148, 1},
		{148, 1},
		{148, 1},
		{131, 1},
		{131, 1},
		{136, 2},
		{154, 2},
		{155, 2},
		{142, 3},
		{247, 1},
		{247, 1},
		{247, 1},
		{247, 1},
		{247, 1},
		{247, 1},
		{130, 1},
		{129, 2},
		{129, 3},
		{129, 3},
		{129, 3},
		{129, 3},
		{129, 3},
		{149, 3},
		{149, 3},
		{149, 3},
		{149, 3},
		{149, 3},
		{149, 3},
		{146, 3},
		{146, 3},
		{146, 3},
		{146, 2},
		{153, 3},
		{132, 3},
		{139, 4},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{243, 1},
		{243, 3},
		{135, 7},
		{283, 1},
		{255, 0},
		{255, 2},
		{128, 4},
		{128, 5},
		{128, 5},
		{128, 5},
		{128, 5},
		{128, 5},
		{128, 5},
		{128, 6},
		{168, 0},
		{168, 1},
		{272, 0},
		{272, 2},
		{138, 6},
		{251, 1},
		{251, 1},
		{251, 1},
		{251, 1},
		{251, 1},
		{251, 1},
		{251, 1},
		{251, 1},
		{144, 3},
		{143, 4},
		{134, 6},
		{246, 1},
		{246, 1},
		{246, 1},
		{246, 1},
		{246, 1},
		{246, 1},
		{246, 1},
		{246, 1},
		{246, 4},
		{246, 1},
		{246, 4},
		{133, 1},
		{133, 1},
		{152, 5},
		{151, 4},
		{241, 1},
		{241, 2},
		{193, 4},
		{217, 0},
		{217, 2},
		{141, 3},
		{147, 4},
		{223, 3},
		{286, 1},
		{286, 3},
		{137, 2},
		{127, 3},
		{150, 1},
		{231, 1},
		{180, 8},
		{232, 3},
		{232, 2},
		{282, 1},
		{282, 3},
		{233, 1},
		{233, 3},
		{175, 2},
		{242, 0},
		{242, 2},
		{253, 0},
		{253, 1},
		{252, 2},
		{252, 2},
		{182, 2},
		{256, 0},
		{256, 1},
		{273, 1},
		{273, 3},
		{228, 4},
		{259, 2},
		{260, 0},
		{260, 1},
		{281, 0},
		{261, 1},
		{261, 3},
		{275, 1},
		{275, 3},
		{188, 1},
		{188, 2},
		{188, 3},
		{188, 3},
		{188, 4},
		{188, 3},
		{188, 3},
		{188, 4},
		{188, 2},
		{191, 1},
		{191, 3},
		{191, 3},
		{162, 3},
		{280, 4},
		{280, 4},
		{280, 4},
		{160, 3},
		{240, 0},
		{240, 1},
		{196, 3},
		{196, 1},
		{196, 3},
		{196, 1},
		{196, 3},
		{196, 1},
		{192, 2},
		{88, 1},
		{173, 0},
		{173, 1},
		{287, 1},
		{287, 3},
		{199, 2},
		{271, 0},
		{271, 1},
		{195, 1},
		{195, 1},
		{270, 1},
		{270, 3},
		{269, 1},
		{269, 3},
		{279, 2},
		{279, 8},
		{244, 2},
		{245, 0},
		{245, 1},
		{189, 1},
		{189, 1},
		{189, 1},
		{189, 3},
		{189, 4},
		{189, 5},
		{189, 4},
		{190, 0},
		{190, 1},
		{177, 0},
		{177, 1},
		{176, 1},
		{176, 2},
		{172, 5},
		{174, 0},
		{174, 2},
		{183, 0},
		{183, 3},
		{206, 1},
		{206, 3},
		{194, 1},
		{194, 2},
		{274, 1},
		{274, 1},
		{184, 0},
		{184, 2},
		{187, 0},
		{187, 3},
		{186, 0},
		{186, 2},
		{186, 4},
		{186, 4},
		{201, 1},
		{201, 1},
		{200, 1},
		{237, 9},
		{258, 1},
		{258, 3},
		{221, 5},
		{239, 2},
		{235, 2},
		{235, 2},
		{235, 4},
		{197, 0},
		{197, 2},
		{198, 0},
		{198, 3},
		{169, 1},
		{203, 1},
		{264, 1},
		{171, 1},
		{83, 1},
		{83, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{278, 1},
		{278, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [605][]uint16{
		// 0
		{1: 395, 344, 344, 31: 88, 33: 88, 88, 88, 50: 386, 387, 53: 391, 58: 392, 172: 394, 176: 393, 389, 180: 382, 204: 370, 207: 371, 388, 372, 374, 373, 375, 390, 376, 378, 377, 218: 369, 379, 222: 380, 231: 381, 234: 397, 385, 368, 383, 396, 384, 250: 366, 284: 367},
		{2: 365},
		{2: 364, 968},
		{2: 363, 363},
		{2: 361, 361},
		// 5
		{2: 360, 360},
		{2: 359, 359},
		{2: 358, 358},
		{2: 357, 357},
		{2: 356, 356},
		// 10
		{2: 355, 355},
		{2: 354, 354},
		{2: 353, 353},
		{2: 352, 352},
		{2: 351, 351},
		// 15
		{2: 350, 350},
		{2: 349, 349},
		{2: 348, 348},
		{2: 347, 347},
		{2: 346, 346},
		// 20
		{2: 345, 345},
		{2: 343, 343},
		{2: 342, 342},
		{54: 947, 95: 948, 185: 338, 263: 949, 285: 950},
		{31: 543, 33: 872, 873, 874, 232: 542},
		// 25
		{54: 861, 95: 862, 185: 863},
		{1: 395, 31: 88, 172: 394, 176: 393, 541, 180: 860},
		{2: 171, 171},
		{1: 395, 31: 87, 33: 87, 87, 87, 172: 859},
		{1: 86, 31: 86, 33: 86, 86, 86},
		// 30
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 448, 404},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 402, 404, 169: 447},
		{43: 399, 262: 398},
		{2: 57, 57},
		{2: 56, 56, 18: 400},
		// 35
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 402, 404, 169: 401},
		{2: 55, 55},
		{50, 2: 50, 50, 7: 50, 10: 50, 50, 50, 50, 82: 50, 121: 50, 123: 50},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 43: 46, 82: 46, 86: 46, 89: 46, 46, 46, 96: 46, 46, 46, 119: 46, 46, 46, 123: 46, 125: 46, 46, 158: 46, 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 43: 45, 82: 45, 86: 45, 89: 45, 45, 45, 96: 45, 45, 45, 119: 45, 45, 45, 123: 45, 125: 45, 45, 158: 45, 45},
		// 40
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43: 44, 82: 44, 86: 44, 89: 44, 44, 44, 96: 44, 44, 44, 119: 44, 44, 44, 123: 44, 125: 44, 44, 158: 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43: 43, 82: 43, 86: 43, 89: 43, 43, 43, 96: 43, 43, 43, 119: 43, 43, 43, 123: 43, 125: 43, 43, 158: 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43: 42, 82: 42, 86: 42, 89: 42, 42, 42, 96: 42, 42, 42, 119: 42, 42, 42, 123: 42, 125: 42, 42, 158: 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 43: 41, 82: 41, 86: 41, 89: 41, 41, 41, 96: 41, 41, 41, 119: 41, 41, 41, 123: 41, 125: 41, 41, 158: 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 43: 40, 82: 40, 86: 40, 89: 40, 40, 40, 96: 40, 40, 40, 119: 40, 40, 40, 123: 40, 125: 40, 40, 158: 40, 40},
		// 45
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 43: 39, 82: 39, 86: 39, 89: 39, 39, 39, 96: 39, 39, 39, 119: 39, 39, 39, 123: 39, 125: 39, 39, 158: 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 43: 38, 82: 38, 86: 38, 89: 38, 38, 38, 96: 38, 38, 38, 119: 38, 38, 38, 123: 38, 125: 38, 38, 158: 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 43: 37, 82: 37, 86: 37, 89: 37, 37, 37, 96: 37, 37, 37, 119: 37, 37, 37, 123: 37, 125: 37, 37, 158: 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 43: 36, 82: 36, 86: 36, 89: 36, 36, 36, 96: 36, 36, 36, 119: 36, 36, 36, 123: 36, 125: 36, 36, 158: 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 43: 35, 82: 35, 86: 35, 89: 35, 35, 35, 96: 35, 35, 35, 119: 35, 35, 35, 123: 35, 125: 35, 35, 158: 35},
		// 50
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 43: 34, 82: 34, 86: 34, 89: 34, 34, 34, 96: 34, 34, 34, 119: 34, 34, 34, 123: 34, 125: 34, 34, 158: 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 43: 33, 82: 33, 86: 33, 89: 33, 33, 33, 96: 33, 33, 33, 119: 33, 33, 33, 123: 33, 125: 33, 33, 158: 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 43: 32, 82: 32, 86: 32, 89: 32, 32, 32, 96: 32, 32, 32, 119: 32, 32, 32, 123: 32, 125: 32, 32, 158: 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 43: 31, 82: 31, 86: 31, 89: 31, 31, 31, 96: 31, 31, 31, 119: 31, 31, 31, 123: 31, 125: 31, 31, 158: 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 43: 30, 82: 30, 86: 30, 89: 30, 30, 30, 96: 30, 30, 30, 119: 30, 30, 30, 123: 30, 125: 30, 30, 158: 30, 30},
		// 55
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 43: 29, 82: 29, 86: 29, 89: 29, 29, 29, 96: 29, 29, 29, 119: 29, 29, 29, 123: 29, 125: 29, 29, 158: 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 43: 28, 82: 28, 86: 28, 89: 28, 28, 28, 96: 28, 28, 28, 119: 28, 28, 28, 123: 28, 125: 28, 28, 158: 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 43: 27, 82: 27, 86: 27, 89: 27, 27, 27, 96: 27, 27, 27, 119: 27, 27, 27, 123: 27, 125: 27, 27, 158: 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 43: 26, 82: 26, 86: 26, 89: 26, 26, 26, 96: 26, 26, 26, 119: 26, 26, 26, 123: 26, 125: 26, 26, 158: 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 43: 25, 82: 25, 86: 25, 89: 25, 25, 25, 96: 25, 25, 25, 119: 25, 25, 25, 123: 25, 125: 25, 25, 158: 25, 25},
		// 60
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 43: 24, 82: 24, 86: 24, 89: 24, 24, 24, 96: 24, 24, 24, 119: 24, 24, 24, 123: 24, 125: 24, 24, 158: 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 43: 23, 82: 23, 86: 23, 89: 23, 23, 23, 96: 23, 23, 23, 119: 23, 23, 23, 123: 23, 125: 23, 23, 158: 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 43: 22, 82: 22, 86: 22, 89: 22, 22, 22, 96: 22, 22, 22, 119: 22, 22, 22, 123: 22, 125: 22, 22, 158: 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 43: 21, 82: 21, 86: 21, 89: 21, 21, 21, 96: 21, 21, 21, 119: 21, 21, 21, 123: 21, 125: 21, 21, 158: 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 43: 20, 82: 20, 86: 20, 89: 20, 20, 20, 96: 20, 20, 20, 119: 20, 20, 20, 123: 20, 125: 20, 20, 158: 20, 20},
		// 65
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 43: 19, 82: 19, 86: 19, 89: 19, 19, 19, 96: 19, 19, 19, 119: 19, 19, 19, 123: 19, 125: 19, 19, 158: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 43: 18, 82: 18, 86: 18, 89: 18, 18, 18, 96: 18, 18, 18, 119: 18, 18, 18, 123: 18, 125: 18, 18, 158: 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 43: 17, 82: 17, 86: 17, 89: 17, 17, 17, 96: 17, 17, 17, 119: 17, 17, 17, 123: 17, 125: 17, 17, 158: 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43: 16, 82: 16, 86: 16, 89: 16, 16, 16, 96: 16, 16, 16, 119: 16, 16, 16, 123: 16, 125: 16, 16, 158: 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 43: 15, 82: 15, 86: 15, 89: 15, 15, 15, 96: 15, 15, 15, 119: 15, 15, 15, 123: 15, 125: 15, 15, 158: 15},
		// 70
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 43: 14, 82: 14, 86: 14, 89: 14, 14, 14, 96: 14, 14, 14, 119: 14, 14, 14, 123: 14, 125: 14, 14, 158: 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 43: 13, 82: 13, 86: 13, 89: 13, 13, 13, 96: 13, 13, 13, 119: 13, 13, 13, 123: 13, 125: 13, 13, 158: 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 43: 12, 82: 12, 86: 12, 89: 12, 12, 12, 96: 12, 12, 12, 119: 12, 12, 12, 123: 12, 125: 12, 12, 158: 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 43: 11, 82: 11, 86: 11, 89: 11, 11, 11, 96: 11, 11, 11, 119: 11, 11, 11, 123: 11, 125: 11, 11, 158: 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 43: 10, 82: 10, 86: 10, 89: 10, 10, 10, 96: 10, 10, 10, 119: 10, 10, 10, 123: 10, 125: 10, 10, 158: 10},
		// 75
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 43: 9, 82: 9, 86: 9, 89: 9, 9, 9, 96: 9, 9, 9, 119: 9, 9, 9, 123: 9, 125: 9, 9, 158: 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 43: 8, 82: 8, 86: 8, 89: 8, 8, 8, 96: 8, 8, 8, 119: 8, 8, 8, 123: 8, 125: 8, 8, 158: 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 43: 7, 82: 7, 86: 7, 89: 7, 7, 7, 96: 7, 7, 7, 119: 7, 7, 7, 123: 7, 125: 7, 7, 158: 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 43: 6, 82: 6, 86: 6, 89: 6, 6, 6, 96: 6, 6, 6, 119: 6, 6, 6, 123: 6, 125: 6, 6, 158: 6, 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 43: 5, 82: 5, 86: 5, 89: 5, 5, 5, 96: 5, 5, 5, 119: 5, 5, 5, 123: 5, 125: 5, 5, 158: 5, 5},
		// 80
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 43: 4, 82: 4, 86: 4, 89: 4, 4, 4, 96: 4, 4, 4, 119: 4, 4, 4, 123: 4, 125: 4, 4, 158: 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 43: 3, 82: 3, 86: 3, 89: 3, 3, 3, 96: 3, 3, 3, 119: 3, 3, 3, 123: 3, 125: 3, 3, 158: 3, 3},
		{2: 58, 58},
		{40: 449},
		{32: 455, 46: 452, 451, 49: 453, 160: 454, 188: 456, 191: 450},
		// 85
		{142, 142, 142, 142, 7: 142, 645, 10: 142, 142, 142, 142, 31: 142, 33: 142, 142, 142, 82: 142, 161: 142, 163: 643, 641, 644, 642, 178: 849, 848, 196: 847, 280: 846},
		{32: 455, 42: 688, 44: 687, 160: 639, 162: 686},
		{32: 455, 42: 682, 44: 681, 160: 639, 162: 683},
		{85: 635},
		{133, 133, 133, 133, 7: 133, 133, 10: 133, 133, 133, 133, 31: 133, 33: 133, 133, 133, 82: 133, 161: 133, 163: 133, 133, 133, 133, 178: 133, 133},
		// 90
		{115, 424, 4: 423, 406, 431, 17: 115, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 623, 98: 115, 173: 622, 192: 621},
		{1: 83, 31: 83, 33: 83, 83, 83, 82: 458, 174: 457},
		{1: 84, 31: 84, 33: 84, 84, 84},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 502, 460},
		{291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 33: 291, 291, 291, 291, 291, 291, 291, 291, 291, 86: 843},
		// 95
		{312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 33: 312, 312, 312, 312, 312, 312, 312, 312, 312},
		{311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 33: 311, 311, 311, 311, 311, 311, 311, 311, 311},
		{310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 33: 310, 310, 310, 310, 310, 310, 310, 310, 310},
		{309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 33: 309, 309, 309, 309, 309, 309, 309, 309, 309},
		{308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 33: 308, 308, 308, 308, 308, 308, 308, 308, 308},
		// 100
		{307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 33: 307, 307, 307, 307, 307, 307, 307, 307, 307},
		{306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 33: 306, 306, 306, 306, 306, 306, 306, 306, 306},
		{305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 33: 305, 305, 305, 305, 305, 305, 305, 305, 305},
		{304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 33: 304, 304, 304, 304, 304, 304, 304, 304, 304},
		{303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 33: 303, 303, 303, 303, 303, 303, 303, 303, 303},
		// 105
		{302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 33: 302, 302, 302, 302, 302, 302, 302, 302, 302},
		{301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 33: 301, 301, 301, 301, 301, 301, 301, 301, 301},
		{300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 33: 300, 300, 300, 300, 300, 300, 300, 300, 300},
		{299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 33: 299, 299, 299, 299, 299, 299, 299, 299, 299},
		{298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 33: 298, 298, 298, 298, 298, 298, 298, 298, 298},
		// 110
		{297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 33: 297, 297, 297, 297, 297, 297, 297, 297, 297},
		{296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 33: 296, 296, 296, 296, 296, 296, 296, 296, 296},
		{295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 33: 295, 295, 295, 295, 295, 295, 295, 295, 295},
		{294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 33: 294, 294, 294, 294, 294, 294, 294, 294, 294},
		{293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 33: 293, 293, 293, 293, 293, 293, 293, 293, 293},
		// 115
		{292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 33: 292, 292, 292, 292, 292, 292, 292, 292, 292},
		{290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 33: 290, 290, 290, 290, 290, 290, 290, 290, 290},
		{289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 33: 289, 289, 289, 289, 289, 289, 289, 289, 289},
		{288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 33: 288, 288, 288, 288, 288, 288, 288, 288, 288},
		{287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 33: 287, 287, 287, 287, 287, 287, 287, 287, 287},
		// 120
		{286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 33: 286, 286, 286, 286, 286, 286, 286, 286, 286},
		{285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 33: 285, 285, 285, 285, 285, 285, 285, 285, 285},
		{284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 33: 284, 284, 284, 284, 284, 284, 284, 284, 284},
		{283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 33: 283, 283, 283, 283, 283, 283, 283, 283, 283},
		{282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 33: 282, 282, 282, 282, 282, 282, 282, 282, 282},
		// 125
		{281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 33: 281, 281, 281, 281, 281, 281, 281, 281, 281},
		{280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 33: 280, 280, 280, 280, 280, 280, 280, 280, 280},
		{279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 33: 279, 279, 279, 279, 279, 279, 279, 279, 279},
		{278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 33: 278, 278, 278, 278, 278, 278, 278, 278, 278},
		{277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 33: 277, 277, 277, 277, 277, 277, 277, 277, 277},
		// 130
		{276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 33: 276, 276, 276, 276, 276, 276, 276, 276, 276},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 33: 38, 38, 38, 38, 38, 38, 38, 38, 38, 86: 38, 842, 159: 38},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 33: 35, 35, 35, 35, 35, 35, 35, 35, 35, 86: 35, 841, 159: 35},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 33: 36, 36, 36, 36, 36, 36, 36, 36, 36, 86: 36, 840, 159: 36},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 33: 24, 24, 24, 24, 24, 24, 24, 24, 24, 85: 832, 24, 159: 24},
		// 135
		{265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 33: 265, 265, 265, 265, 265, 265, 265, 265, 265},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 831, 460},
		{82, 82, 82, 82, 82, 8: 562, 575, 82, 82, 82, 82, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570, 82, 33: 82, 82, 82},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 830, 460},
		{1: 828, 4: 423, 406, 431, 8: 501, 503, 31: 88, 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 827, 460, 172: 394, 176: 393, 541, 180: 540},
		// 140
		{32: 821},
		{32: 245},
		{32: 244},
		{32: 243},
		{32: 242},
		// 145
		{32: 241},
		{32: 240},
		{32: 239},
		{32: 238},
		{32: 237},
		// 150
		{32: 236},
		{32: 235},
		{32: 234},
		{32: 233},
		{32: 232},
		// 155
		{32: 231},
		{32: 230},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 812, 19, 19, 19, 19, 19, 19, 19, 19, 19, 86: 19, 159: 19},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 806, 15, 15, 15, 15, 15, 15, 15, 15, 15, 86: 15, 159: 15},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 802, 12, 12, 12, 12, 12, 12, 12, 12, 12, 86: 12, 159: 12},
		// 160
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 798, 13, 13, 13, 13, 13, 13, 13, 13, 13, 86: 13, 159: 13},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 794, 16, 16, 16, 16, 16, 16, 16, 16, 16, 86: 16, 159: 16},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 790, 11, 11, 11, 11, 11, 11, 11, 11, 11, 86: 11, 159: 11},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 786, 17, 17, 17, 17, 17, 17, 17, 17, 17, 86: 17, 159: 17},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 779, 14, 14, 14, 14, 14, 14, 14, 14, 14, 86: 14, 159: 14},
		// 165
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 766, 10, 10, 10, 10, 10, 10, 10, 10, 10, 86: 10, 159: 10},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 746, 7, 7, 7, 7, 7, 7, 7, 7, 7, 86: 7, 159: 7},
		{188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 33: 188, 188, 188, 188, 188, 188, 188, 188, 188},
		{187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 33: 187, 187, 187, 187, 187, 187, 187, 187, 187},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 36: 734, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 731, 460, 193: 733, 241: 732},
		// 170
		{32: 539, 127: 538},
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 33: 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 33: 116, 116, 116, 116, 116, 116, 116, 116, 116, 43: 116, 82: 116, 86: 116, 97: 116, 116, 119: 116, 116, 126: 116, 158: 116},
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 33: 174, 174, 174, 174, 174, 174, 174, 174, 174},
		{1: 395, 31: 88, 172: 394, 176: 393, 541, 180: 540},
		// 175
		{730},
		{31: 543, 232: 542},
		{14: 609, 182: 608},
		{1: 215, 4: 215, 215, 215, 8: 215, 215, 15: 546, 32: 215, 42: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 85: 215, 87: 215, 92: 215, 215, 215, 215, 99: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 167: 544, 545},
		{1: 214, 4: 214, 214, 214, 8: 214, 214, 32: 214, 42: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 85: 214, 87: 214, 92: 214, 214, 214, 214, 99: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		// 180
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 551, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 547, 460, 175: 550, 233: 549, 282: 548},
		{14: 168},
		{160, 2: 160, 160, 7: 160, 562, 575, 160, 160, 160, 14: 160, 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570, 37: 160, 160, 40: 578, 252: 577, 576},
		{7: 556, 14: 169},
		{7: 167, 14: 167},
		// 185
		{7: 165, 14: 165},
		{7: 116, 116, 116, 14: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 40: 116, 86: 116, 159: 552},
		{7: 162, 14: 162, 65: 554, 242: 553},
		{7: 164, 14: 164},
		{87: 488, 92: 490, 94: 489, 124: 555},
		// 190
		{7: 161, 14: 161},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 551, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 547, 460, 175: 550, 233: 557},
		{7: 166, 14: 166},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 607, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 606, 460},
		// 195
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 605, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 604, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 603, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 602, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 601, 460},
		// 200
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 600, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 599, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 598, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 597, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 596, 460},
		// 205
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 595, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 594, 460},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 593, 460},
		{9: 591, 229: 590},
		{32: 583, 223: 589},
		// 210
		{18: 581},
		{163, 2: 163, 163, 7: 163, 10: 163, 163, 163, 14: 163, 37: 163, 163},
		{159, 2: 159, 159, 7: 159, 10: 159, 159, 159, 14: 159, 37: 159, 159},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 579, 404, 87: 580},
		{158, 2: 158, 158, 7: 158, 10: 158, 158, 158, 14: 158, 37: 158, 158},
		// 215
		{157, 2: 157, 157, 7: 157, 10: 157, 157, 157, 14: 157, 37: 157, 157},
		{32: 583, 223: 582},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 33: 178, 178, 178, 178, 178, 178, 178, 178, 178},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 584, 460, 286: 585},
		{176, 7: 176, 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		// 220
		{586, 7: 587},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 33: 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 588, 460},
		{175, 7: 175, 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 33: 179, 179, 179, 179, 179, 179, 179, 179, 179},
		// 225
		{202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 33: 202, 202, 202, 202, 202, 202, 202, 202, 202},
		{229: 592},
		{201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 33: 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{248, 248, 248, 248, 248, 248, 248, 248, 562, 575, 248, 248, 248, 248, 248, 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 248, 248, 570, 248, 33: 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{250, 250, 250, 250, 250, 250, 250, 250, 562, 575, 250, 250, 250, 250, 250, 558, 561, 573, 574, 250, 563, 560, 559, 566, 565, 567, 568, 564, 250, 250, 250, 250, 33: 250, 250, 250, 250, 250, 250, 250, 250, 250},
		// 230
		{251, 251, 251, 251, 251, 251, 251, 251, 562, 575, 251, 251, 251, 251, 251, 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 251, 251, 251, 251, 33: 251, 251, 251, 251, 251, 251, 251, 251, 251},
		{252, 252, 252, 252, 252, 252, 252, 252, 562, 575, 252, 252, 252, 252, 252, 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 252, 252, 570, 252, 33: 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{253, 253, 253, 253, 253, 253, 253, 253, 562, 575, 253, 253, 253, 253, 253, 558, 561, 253, 253, 253, 253, 560, 559, 253, 253, 253, 253, 253, 253, 253, 253, 253, 33: 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{254, 254, 254, 254, 254, 254, 254, 254, 562, 575, 254, 254, 254, 254, 254, 558, 561, 254, 254, 254, 254, 560, 559, 254, 254, 254, 254, 254, 254, 254, 254, 254, 33: 254, 254, 254, 254, 254, 254, 254, 254, 254},
		{255, 255, 255, 255, 255, 255, 255, 255, 562, 575, 255, 255, 255, 255, 255, 558, 561, 255, 255, 255, 255, 560, 559, 255, 255, 255, 255, 255, 255, 255, 255, 255, 33: 255, 255, 255, 255, 255, 255, 255, 255, 255},
		// 235
		{256, 256, 256, 256, 256, 256, 256, 256, 562, 575, 256, 256, 256, 256, 256, 558, 561, 256, 256, 256, 256, 560, 559, 256, 256, 256, 256, 256, 256, 256, 256, 256, 33: 256, 256, 256, 256, 256, 256, 256, 256, 256},
		{257, 257, 257, 257, 257, 257, 257, 257, 562, 575, 257, 257, 257, 257, 257, 558, 561, 257, 257, 257, 257, 560, 559, 257, 257, 257, 257, 257, 257, 257, 257, 257, 33: 257, 257, 257, 257, 257, 257, 257, 257, 257},
		{258, 258, 258, 258, 258, 258, 258, 258, 562, 575, 258, 258, 258, 258, 258, 558, 561, 258, 258, 258, 258, 560, 559, 258, 258, 258, 258, 258, 258, 258, 258, 258, 33: 258, 258, 258, 258, 258, 258, 258, 258, 258},
		{259, 259, 259, 259, 259, 259, 259, 259, 259, 575, 259, 259, 259, 259, 259, 558, 259, 259, 259, 259, 259, 560, 559, 259, 259, 259, 259, 259, 259, 259, 259, 259, 33: 259, 259, 259, 259, 259, 259, 259, 259, 259},
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 575, 260, 260, 260, 260, 260, 558, 260, 260, 260, 260, 260, 560, 559, 260, 260, 260, 260, 260, 260, 260, 260, 260, 33: 260, 260, 260, 260, 260, 260, 260, 260, 260},
		// 240
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 575, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 33: 261, 261, 261, 261, 261, 261, 261, 261, 261},
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 575, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 33: 262, 262, 262, 262, 262, 262, 262, 262, 262},
		{263, 263, 263, 263, 263, 263, 263, 263, 263, 575, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 33: 263, 263, 263, 263, 263, 263, 263, 263, 263},
		{83, 2: 83, 83, 10: 83, 83, 83, 83, 82: 458, 174: 701},
		{227: 612, 611, 273: 610},
		// 245
		{156, 2: 156, 156, 7: 699, 10: 156, 156, 156, 156, 82: 156},
		{153, 2: 153, 153, 7: 153, 10: 153, 153, 153, 153, 82: 153},
		{32: 615, 46: 452, 451, 49: 453, 160: 454, 188: 614, 191: 450, 261: 613},
		{149, 2: 149, 149, 7: 149, 10: 149, 149, 149, 149, 82: 149, 161: 695, 259: 696, 694},
		{146, 2: 146, 146, 7: 146, 10: 146, 146, 146, 146, 82: 146, 161: 146},
		// 250
		{115, 424, 4: 423, 406, 431, 17: 115, 32: 455, 42: 421, 44: 420, 416, 619, 618, 414, 620, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 623, 98: 115, 160: 454, 173: 622, 188: 617, 191: 450, 621, 275: 616},
		{691, 7: 692},
		{144, 7: 144},
		{30, 17: 30, 32: 455, 42: 688, 44: 687, 98: 30, 160: 639, 162: 686},
		{31, 17: 31, 32: 455, 42: 682, 44: 681, 98: 31, 160: 639, 162: 683},
		// 255
		{27, 17: 27, 85: 635, 98: 27},
		{634},
		{110, 17: 628, 97: 110, 627, 119: 110, 195: 625, 199: 626, 271: 624},
		{114, 2: 114, 114, 7: 114, 10: 114, 114, 114, 114, 114, 17: 114, 43: 114, 82: 114, 97: 114, 114, 119: 114, 114, 126: 114},
		{117, 97: 117, 119: 117},
		// 260
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 631, 404, 171: 630, 269: 629},
		{109, 97: 109, 119: 109},
		{1: 108, 4: 108, 108, 108, 42: 108, 44: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		{1: 107, 4: 107, 107, 107, 42: 107, 44: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{111, 15: 111, 111, 89: 111, 111, 111, 96: 111, 111, 119: 111, 125: 632},
		// 265
		{104, 15: 104, 104, 89: 104, 104, 104, 96: 104, 104, 119: 104, 125: 104},
		{47, 2: 47, 47, 7: 47, 15: 47, 47, 89: 47, 47, 47, 96: 47, 47, 119: 47, 125: 47},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 631, 404, 171: 633},
		{103, 15: 103, 103, 89: 103, 103, 103, 96: 103, 103, 119: 103, 125: 103},
		{126, 126, 126, 126, 126, 7: 126, 126, 10: 126, 126, 126, 126, 31: 126, 126, 126, 126, 126, 82: 126, 161: 126, 163: 126, 126, 126, 126, 178: 126, 126},
		// 270
		{42: 637, 44: 636},
		{32: 455, 160: 639, 162: 680},
		{32: 455, 160: 639, 162: 638},
		{135, 135, 135, 135, 7: 135, 10: 135, 135, 135, 135, 31: 135, 33: 135, 135, 135, 82: 135, 161: 135},
		{8: 645, 32: 647, 163: 643, 641, 644, 642, 196: 646, 279: 640},
		// 275
		{32: 455, 160: 679},
		{1: 424, 4: 423, 406, 431, 17: 115, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 623, 97: 115, 115, 119: 115, 173: 622, 192: 676},
		{122, 4: 122, 15: 122, 122, 32: 122, 82: 122, 89: 122, 91: 122},
		{1: 424, 4: 423, 406, 431, 17: 115, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 623, 97: 115, 115, 173: 622, 192: 674},
		{120, 4: 120, 15: 120, 120, 32: 120, 82: 120, 89: 120, 91: 120},
		// 280
		{118, 4: 118, 15: 118, 118, 32: 118, 82: 118, 89: 118, 91: 118},
		{15: 659, 660, 32: 90, 89: 661, 91: 662, 189: 663, 673},
		{8: 125, 32: 455, 160: 648, 163: 125, 125, 125, 125, 240: 649},
		{124, 4: 124, 8: 124, 82: 124, 163: 124, 124, 124, 124},
		{8: 645, 163: 643, 641, 644, 642, 196: 650},
		// 285
		{125, 4: 125, 32: 455, 82: 125, 160: 648, 240: 651},
		{83, 4: 83, 82: 458, 174: 652},
		{99, 4: 654, 244: 655, 653},
		{657},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 656, 460},
		// 290
		{98},
		{100, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{15: 659, 660, 32: 90, 89: 661, 91: 662, 189: 663, 658},
		{32: 101},
		{32: 97, 90: 97, 96: 97},
		// 295
		{32: 96, 90: 96, 96: 96},
		{32: 95, 90: 95, 96: 95},
		{7: 665, 85: 664},
		{32: 89, 90: 89, 96: 89},
		{7: 669, 181: 668},
		// 300
		{85: 666},
		{181: 667},
		{32: 91, 90: 91, 96: 91},
		{32: 94, 90: 94, 96: 94},
		{85: 671, 181: 670},
		// 305
		{32: 93, 90: 93, 96: 93},
		{181: 672},
		{32: 92, 90: 92, 96: 92},
		{32: 102},
		{97: 675},
		// 310
		{121, 4: 121, 15: 121, 121, 32: 121, 82: 121, 89: 121, 91: 121},
		{97: 678, 119: 677},
		{123, 4: 123, 15: 123, 123, 32: 123, 82: 123, 89: 123, 91: 123},
		{119, 4: 119, 15: 119, 119, 32: 119, 82: 119, 89: 119, 91: 119},
		{130, 130, 130, 130, 7: 130, 10: 130, 130, 130, 130, 31: 130, 33: 130, 130, 130, 82: 130, 161: 130},
		// 315
		{138, 138, 138, 138, 7: 138, 10: 138, 138, 138, 138, 31: 138, 33: 138, 138, 138, 82: 138, 161: 138},
		{32: 455, 160: 639, 162: 685},
		{32: 455, 160: 639, 162: 684},
		{134, 134, 134, 134, 7: 134, 10: 134, 134, 134, 134, 31: 134, 33: 134, 134, 134, 82: 134, 161: 134},
		{136, 136, 136, 136, 7: 136, 10: 136, 136, 136, 136, 31: 136, 33: 136, 136, 136, 82: 136, 161: 136},
		// 320
		{139, 139, 139, 139, 7: 139, 10: 139, 139, 139, 139, 31: 139, 33: 139, 139, 139, 82: 139, 161: 139},
		{141, 141, 141, 141, 7: 141, 10: 141, 141, 141, 141, 31: 141, 33: 141, 141, 141, 82: 141, 161: 141},
		{32: 455, 160: 639, 162: 690},
		{32: 455, 160: 639, 162: 689},
		{137, 137, 137, 137, 7: 137, 10: 137, 137, 137, 137, 31: 137, 33: 137, 137, 137, 82: 137, 161: 137},
		// 325
		{140, 140, 140, 140, 7: 140, 10: 140, 140, 140, 140, 31: 140, 33: 140, 140, 140, 82: 140, 161: 140},
		{145, 2: 145, 145, 7: 145, 10: 145, 145, 145, 145, 82: 145, 161: 145},
		{32: 455, 46: 452, 451, 49: 453, 160: 454, 188: 693, 191: 450},
		{143, 7: 143},
		{147, 2: 147, 147, 7: 147, 10: 147, 147, 147, 147, 82: 147, 281: 698},
		// 330
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 402, 404, 169: 697},
		{148, 2: 148, 148, 7: 148, 10: 148, 148, 148, 148, 82: 148},
		{150, 2: 150, 150, 7: 150, 10: 150, 150, 150, 150, 82: 150},
		{151, 2: 151, 151, 7: 151, 10: 151, 151, 151, 151, 82: 151},
		{227: 612, 700},
		// 335
		{152, 2: 152, 152, 7: 152, 10: 152, 152, 152, 152, 82: 152},
		{81, 2: 81, 81, 10: 81, 81, 81, 703, 183: 702},
		{73, 2: 73, 73, 10: 73, 73, 714, 184: 713},
		{205: 704},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 547, 460, 175: 707, 194: 706, 206: 705},
		// 340
		{80, 2: 80, 80, 7: 711, 10: 80, 80, 80},
		{79, 2: 79, 79, 7: 79, 10: 79, 79, 79},
		{77, 2: 77, 77, 7: 77, 10: 77, 77, 77, 37: 709, 710, 274: 708},
		{76, 2: 76, 76, 7: 76, 10: 76, 76, 76},
		{75, 2: 75, 75, 7: 75, 10: 75, 75, 75},
		// 345
		{74, 2: 74, 74, 7: 74, 10: 74, 74, 74},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 547, 460, 175: 707, 194: 712},
		{78, 2: 78, 78, 7: 78, 10: 78, 78, 78},
		{71, 2: 71, 71, 10: 71, 717, 187: 716},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 715, 460},
		// 350
		{72, 2: 72, 72, 8: 562, 575, 72, 72, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{69, 2: 69, 69, 10: 721, 186: 720},
		{205: 718},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 547, 460, 175: 707, 194: 706, 206: 719},
		{70, 2: 70, 70, 7: 711, 10: 70},
		// 355
		{170, 2: 170, 170},
		{85: 725, 89: 724, 200: 723, 722},
		{68, 2: 68, 68, 7: 726, 45: 727},
		{65, 2: 65, 65, 7: 65, 45: 65},
		{64, 2: 64, 64, 7: 64, 45: 64},
		// 360
		{63, 2: 63, 63, 7: 63, 45: 63},
		{85: 725, 89: 724, 200: 723, 729},
		{85: 725, 89: 724, 200: 723, 728},
		{66, 2: 66, 66},
		{67, 2: 67, 67},
		// 365
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 33: 173, 173, 173, 173, 173, 173, 173, 173, 173},
		{8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570, 36: 734, 193: 733, 241: 743},
		{5: 181, 36: 734, 39: 740, 193: 739, 217: 738},
		{5: 184, 36: 184, 39: 184},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 735, 460},
		// 370
		{8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570, 41: 736},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 737, 460},
		{5: 182, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570, 36: 182, 39: 182},
		{5: 742},
		{5: 183, 36: 183, 39: 183},
		// 375
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 741, 460},
		{5: 180, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 33: 185, 185, 185, 185, 185, 185, 185, 185, 185},
		{5: 181, 36: 734, 39: 740, 193: 739, 217: 744},
		{5: 745},
		// 380
		{186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 33: 186, 186, 186, 186, 186, 186, 186, 186, 186},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 747, 460},
		{8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570, 40: 748},
		{48: 757, 63: 751, 756, 66: 750, 758, 246: 749, 248: 755, 754, 254: 753, 265: 752},
		{765},
		// 385
		{199},
		{198},
		{197},
		{196},
		{195},
		// 390
		{194},
		{193},
		{192, 60: 762},
		{190, 60: 759},
		{48: 760},
		// 395
		{62: 761},
		{189},
		{48: 763},
		{62: 764},
		{191},
		// 400
		{200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 33: 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{52: 770, 55: 771, 772, 769, 59: 773, 61: 768, 68: 774, 775, 251: 767},
		{14: 776},
		{14: 210},
		{14: 209},
		// 405
		{14: 208},
		{14: 207},
		{14: 206},
		{14: 205},
		{14: 204},
		// 410
		{14: 203},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 777, 460},
		{778, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 33: 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{1: 215, 4: 215, 215, 215, 8: 215, 215, 32: 215, 42: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 85: 215, 87: 215, 92: 215, 215, 215, 215, 99: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 167: 544, 780},
		// 415
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 781, 460},
		{213, 7: 783, 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570, 272: 782},
		{785},
		{87: 488, 92: 490, 94: 489, 124: 784},
		{212},
		// 420
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 33: 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{1: 215, 4: 215, 215, 215, 8: 215, 215, 32: 215, 42: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 85: 215, 87: 215, 92: 215, 215, 215, 215, 99: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 167: 544, 787},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 788, 460},
		{789, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 33: 217, 217, 217, 217, 217, 217, 217, 217, 217},
		// 425
		{1: 215, 4: 215, 215, 215, 8: 215, 215, 32: 215, 42: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 85: 215, 87: 215, 92: 215, 215, 215, 215, 99: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 167: 544, 791},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 792, 460},
		{793, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 33: 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{1: 215, 4: 215, 215, 215, 8: 215, 215, 32: 215, 42: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 85: 215, 87: 215, 92: 215, 215, 215, 215, 99: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 167: 544, 795},
		// 430
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 796, 460},
		{797, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 33: 219, 219, 219, 219, 219, 219, 219, 219, 219},
		{1: 215, 4: 215, 215, 215, 8: 215, 215, 32: 215, 42: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 85: 215, 87: 215, 92: 215, 215, 215, 215, 99: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 167: 544, 799},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 800, 460},
		// 435
		{801, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 33: 220, 220, 220, 220, 220, 220, 220, 220, 220},
		{1: 215, 4: 215, 215, 215, 8: 215, 215, 32: 215, 42: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 85: 215, 87: 215, 92: 215, 215, 215, 215, 99: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 167: 544, 803},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 804, 460},
		{805, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		// 440
		{221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 33: 221, 221, 221, 221, 221, 221, 221, 221, 221},
		{1: 215, 4: 215, 215, 215, 8: 215, 215, 15: 807, 32: 215, 42: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 85: 215, 87: 215, 92: 215, 215, 215, 215, 99: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 167: 544, 808},
		{811},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 809, 460},
		{810, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		// 445
		{222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 33: 222, 222, 222, 222, 222, 222, 222, 222, 222},
		{223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 33: 223, 223, 223, 223, 223, 223, 223, 223, 223},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 813, 460},
		{8: 562, 575, 14: 814, 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 815, 460, 283: 816},
		// 450
		{226, 6: 226, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{225, 6: 818, 255: 817},
		{820},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 819, 460},
		{224, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		// 455
		{227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 33: 227, 227, 227, 227, 227, 227, 227, 227, 227},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 822, 460, 243: 823},
		{229, 7: 229, 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{824, 7: 825},
		{246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 33: 246, 246, 246, 246, 246, 246, 246, 246, 246},
		// 460
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 826, 460},
		{228, 7: 228, 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{829, 8: 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{25, 424, 4: 423, 406, 431, 8: 25, 25, 15: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 448, 404, 86: 25},
		{247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 33: 247, 247, 247, 247, 247, 247, 247, 247, 247},
		// 465
		{249, 249, 249, 249, 249, 249, 249, 249, 249, 575, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 33: 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{264, 264, 264, 264, 264, 264, 264, 264, 264, 575, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 33: 264, 264, 264, 264, 264, 264, 264, 264, 264},
		{52: 836, 55: 837, 838, 835, 59: 839, 61: 834, 247: 833},
		{272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 33: 272, 272, 272, 272, 272, 272, 272, 272, 272},
		{271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 33: 271, 271, 271, 271, 271, 271, 271, 271, 271},
		// 470
		{270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 33: 270, 270, 270, 270, 270, 270, 270, 270, 270},
		{269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 33: 269, 269, 269, 269, 269, 269, 269, 269, 269},
		{268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 33: 268, 268, 268, 268, 268, 268, 268, 268, 268},
		{267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 33: 267, 267, 267, 267, 267, 267, 267, 267, 267},
		{266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 33: 266, 266, 266, 266, 266, 266, 266, 266, 266},
		// 475
		{273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 33: 273, 273, 273, 273, 273, 273, 273, 273, 273},
		{274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 33: 274, 274, 274, 274, 274, 274, 274, 274, 274},
		{275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 33: 275, 275, 275, 275, 275, 275, 275, 275, 275},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 845, 404, 203: 844},
		{313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 33: 313, 313, 313, 313, 313, 313, 313, 313, 313},
		// 480
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 33: 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{32: 455, 160: 858},
		{32: 455, 160: 857},
		{17: 628, 98: 627, 195: 625, 199: 853},
		{17: 628, 98: 627, 195: 625, 199: 850},
		// 485
		{15: 659, 660, 89: 661, 90, 662, 189: 663, 851},
		{90: 852},
		{32: 128},
		{15: 659, 660, 89: 661, 90, 662, 96: 90, 189: 663, 854},
		{90: 856, 96: 855},
		// 490
		{32: 129},
		{32: 127},
		{131, 131, 131, 131, 7: 131, 131, 10: 131, 131, 131, 131, 31: 131, 33: 131, 131, 131, 82: 131, 161: 131, 163: 131, 131, 131, 131, 178: 131, 131},
		{132, 132, 132, 132, 7: 132, 132, 10: 132, 132, 132, 132, 31: 132, 33: 132, 132, 132, 82: 132, 161: 132, 163: 132, 132, 132, 132, 178: 132, 132},
		{1: 85, 31: 85, 33: 85, 85, 85},
		// 495
		{2: 332, 332},
		{1: 54, 4: 54, 54, 54, 42: 54, 44: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 170: 865, 197: 870},
		{1: 54, 4: 54, 54, 54, 42: 54, 44: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 170: 865, 197: 868},
		{1: 54, 4: 54, 54, 54, 42: 54, 44: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 170: 865, 197: 864},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 867, 404},
		// 500
		{93: 866},
		{1: 53, 4: 53, 53, 53, 42: 53, 44: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{2: 333, 333},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 631, 404, 171: 869},
		{2: 334, 334},
		// 505
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 402, 404, 169: 871},
		{2: 335, 335},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 938, 287: 937},
		{121: 330, 123: 330, 266: 899, 898, 897},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 877, 221: 876, 258: 875},
		// 510
		{7: 890, 14: 609, 182: 889},
		{7: 61, 14: 61},
		{158: 878},
		{32: 879},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 883, 122: 882, 202: 880, 230: 881},
		// 515
		{316, 7: 316},
		{887, 7: 886},
		{20: 884},
		{86: 843},
		{1: 424, 4: 423, 406, 431, 8: 501, 503, 32: 504, 42: 421, 515, 420, 416, 418, 419, 497, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 496, 446, 443, 498, 440, 441, 528, 526, 531, 523, 530, 403, 499, 529, 525, 524, 522, 527, 83: 537, 404, 491, 87: 488, 459, 92: 490, 535, 489, 514, 99: 500, 509, 521, 534, 510, 511, 492, 518, 494, 493, 512, 516, 513, 519, 508, 506, 517, 520, 495, 507, 122: 461, 124: 481, 127: 536, 471, 464, 463, 483, 468, 476, 475, 470, 484, 479, 472, 469, 505, 477, 487, 474, 473, 462, 466, 478, 482, 465, 480, 533, 532, 467, 485, 486, 885, 460},
		// 520
		{314, 7: 314, 562, 575, 15: 558, 561, 573, 574, 571, 563, 560, 559, 566, 565, 567, 568, 564, 569, 572, 570},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 883, 122: 882, 202: 888},
		{7: 59, 14: 59},
		{315, 7: 315},
		{2: 83, 83, 10: 83, 83, 83, 83, 82: 458, 174: 892},
		// 525
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 877, 221: 891},
		{7: 60, 14: 60},
		{2: 81, 81, 10: 81, 81, 81, 703, 183: 893},
		{2: 73, 73, 10: 73, 73, 714, 184: 894},
		{2: 71, 71, 10: 71, 717, 187: 895},
		// 530
		{2: 69, 69, 10: 721, 186: 896},
		{2: 62, 62},
		{121: 904, 123: 903, 220: 902, 257: 901},
		{121: 329, 123: 329},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 402, 404, 169: 900},
		// 535
		{121: 328, 123: 328},
		{2: 155, 155, 7: 929, 10: 155, 155, 155, 155, 609, 82: 155, 182: 930, 256: 928},
		{2: 327, 327, 7: 327, 10: 327, 327, 327, 327, 327, 82: 327},
		{1: 424, 115, 115, 423, 406, 431, 115, 10: 115, 115, 115, 115, 115, 42: 421, 115, 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 115, 537, 404, 88: 623, 120: 115, 173: 926},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 623, 126: 115, 173: 905},
		// 540
		{126: 906},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 907},
		{19: 908},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 909},
		{2: 322, 322, 7: 322, 10: 322, 322, 322, 322, 322, 43: 913, 82: 322, 120: 322, 224: 910, 912, 911},
		// 545
		{2: 324, 324, 7: 324, 10: 324, 324, 324, 324, 324, 82: 324},
		{2: 319, 319, 7: 319, 10: 319, 319, 319, 319, 319, 82: 319, 120: 922, 276: 921, 920},
		{2: 321, 321, 7: 321, 10: 321, 321, 321, 321, 321, 82: 321, 120: 321},
		{32: 914},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 631, 404, 171: 916, 270: 915},
		// 550
		{917, 7: 918},
		{106, 7: 106},
		{2: 320, 320, 7: 320, 10: 320, 320, 320, 320, 320, 82: 320, 120: 320},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 631, 404, 171: 919},
		{105, 7: 105},
		// 555
		{2: 323, 323, 7: 323, 10: 323, 323, 323, 323, 323, 82: 323},
		{2: 318, 318, 7: 318, 10: 318, 318, 318, 318, 318, 82: 318},
		{32: 923},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 883, 122: 882, 202: 880, 230: 924},
		{925, 7: 886},
		// 560
		{2: 317, 317, 7: 317, 10: 317, 317, 317, 317, 317, 82: 317},
		{2: 322, 322, 7: 322, 10: 322, 322, 322, 322, 322, 43: 913, 82: 322, 120: 322, 224: 927, 912, 911},
		{2: 325, 325, 7: 325, 10: 325, 325, 325, 325, 325, 82: 325},
		{2: 83, 83, 10: 83, 83, 83, 83, 82: 458, 174: 932},
		{121: 904, 123: 903, 220: 931},
		// 565
		{2: 154, 154, 10: 154, 154, 154, 154, 82: 154},
		{2: 326, 326, 7: 326, 10: 326, 326, 326, 326, 326, 82: 326},
		{2: 81, 81, 10: 81, 81, 81, 703, 183: 933},
		{2: 73, 73, 10: 73, 73, 714, 184: 934},
		{2: 71, 71, 10: 71, 717, 187: 935},
		// 570
		{2: 69, 69, 10: 721, 186: 936},
		{2: 331, 331},
		{7: 940, 14: 609, 182: 939},
		{7: 113, 14: 113},
		{2: 83, 83, 10: 83, 83, 83, 83, 82: 458, 174: 942},
		// 575
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 537, 404, 88: 941},
		{7: 112, 14: 112},
		{2: 81, 81, 10: 81, 81, 81, 703, 183: 943},
		{2: 73, 73, 10: 73, 73, 714, 184: 944},
		{2: 71, 71, 10: 71, 717, 187: 945},
		// 580
		{2: 69, 69, 10: 721, 186: 946},
		{2: 336, 336},
		{1: 52, 4: 52, 52, 52, 42: 52, 44: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 170: 953, 198: 966},
		{1: 52, 4: 52, 52, 52, 42: 52, 44: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 170: 953, 198: 964},
		{185: 951},
		// 585
		{185: 337},
		{1: 52, 4: 52, 52, 52, 42: 52, 44: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 170: 953, 198: 952},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 957, 404, 264: 956},
		{9: 954},
		{93: 955},
		// 590
		{1: 51, 4: 51, 51, 51, 42: 51, 44: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{32: 958},
		{32: 48},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 845, 404, 203: 960, 278: 959},
		{961, 7: 962},
		// 595
		{2, 7: 2},
		{2: 339, 339},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 845, 404, 203: 963},
		{1, 7: 1},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 631, 404, 171: 965},
		// 600
		{2: 340, 340},
		{1: 424, 4: 423, 406, 431, 42: 421, 44: 420, 416, 418, 419, 414, 422, 405, 407, 412, 409, 417, 426, 427, 428, 415, 429, 444, 410, 445, 408, 411, 446, 443, 413, 440, 441, 432, 433, 442, 434, 439, 403, 425, 435, 436, 437, 430, 438, 83: 402, 404, 169: 967},
		{2: 341, 341},
		{1: 395, 344, 344, 31: 88, 33: 88, 88, 88, 50: 386, 387, 53: 391, 58: 392, 172: 394, 176: 393, 389, 180: 382, 204: 370, 207: 371, 388, 372, 374, 373, 375, 390, 376, 378, 377, 218: 369, 379, 222: 380, 231: 381, 234: 397, 385, 969, 383, 396, 384},
		{2: 362, 362},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	AppendWarn(err error)
	Errors() (warns []error, errs []error)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEOFCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, parser *Parser) int {
	const yyError = 300

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	parser.yylval = yySymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 3:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 21:
		{
			parser.yyVAL.statement = nil
		}
	case 22:
		{
			parser.yyVAL.statement = &ast.BeginStmt{}
		}
	case 23:
		{
			parser.yyVAL.statement = &ast.CommitStmt{}
		}
	case 24:
		{
			parser.yyVAL.statement = &ast.CreateGraphStmt{
				IfNotExists: yyS[yypt-1].item.(bool),
				Graph:       yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 25:
		{
			cl := &ast.CreateLabelStmt{
				IfNotExists: yyS[yypt-1].item.(bool),
				Label:       yyS[yypt-0].item.(model.CIStr),
			}
			parser.yyVAL.statement = cl
		}
	case 26:
		{
			parser.yyVAL.statement = &ast.CreateIndexStmt{
				KeyType:     yyS[yypt-6].item.(ast.IndexKeyType),
				IfNotExists: yyS[yypt-4].item.(bool),
				IndexName:   yyS[yypt-3].item.(model.CIStr),
				Properties:  yyS[yypt-1].item.([]model.CIStr),
			}
		}
	case 27:
		{
			parser.yyVAL.item = ast.IndexKeyTypeNone
		}
	case 28:
		{
			parser.yyVAL.item = ast.IndexKeyTypeUnique
		}
	case 29:
		{
			ds := &ast.DeleteStmt{
				VariableNames: yyS[yypt-6].item.([]model.CIStr),
				From:          yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				ds.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ds.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ds.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ds.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ds.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ds.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ds
		}
	case 30:
		{
			parser.yyVAL.statement = &ast.DropGraphStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Graph:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 31:
		{
			parser.yyVAL.statement = &ast.DropLabelStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Label:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 32:
		{
			parser.yyVAL.statement = &ast.DropIndexStmt{
				IfExists:  yyS[yypt-1].item.(bool),
				IndexName: model.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 33:
		{
			parser.yyVAL.statement = &ast.ExplainStmt{
				Select: yyS[yypt-0].statement.(*ast.SelectStmt),
			}
		}
	case 34:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-6].item.([]*ast.GraphElementInsertion),
			}
			if yyS[yypt-9].item != nil {
				is.PathPatternMacros = yyS[yypt-9].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-7].item != nil {
				is.IntoGraphName = yyS[yypt-7].item.(model.CIStr)
			}
			if yyS[yypt-5].item != nil {
				is.From = yyS[yypt-5].item.(*ast.MatchClauseList)
			}
			if yyS[yypt-4].item != nil {
				is.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				is.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				is.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				is.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				is.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = is
		}
	case 35:
		{
			parser.yyVAL.item = nil
		}
	case 37:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 38:
		{
			parser.yyVAL.item = []*ast.GraphElementInsertion{yyS[yypt-0].item.(*ast.GraphElementInsertion)}
		}
	case 39:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementInsertion), yyS[yypt-0].item.(*ast.GraphElementInsertion))
		}
	case 40:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeVertex,
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-1].item != nil {
				insertion.VariableName = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = insertion
		}
	case 41:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeEdge,
				From:                yyS[yypt-3].item.(model.CIStr),
				To:                  yyS[yypt-1].item.(model.CIStr),
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-5].item != nil {
				insertion.VariableName = yyS[yypt-5].item.(model.CIStr)
			}
			parser.yyVAL.item = insertion
		}
	case 42:
		{
			lps := &ast.LabelsAndProperties{}
			if yyS[yypt-1].item != nil {
				lps.Labels = yyS[yypt-1].item.([]model.CIStr)
			}
			if yyS[yypt-0].item != nil {
				lps.Assignments = yyS[yypt-0].item.([]*ast.PropertyAssignment)
			}
			parser.yyVAL.item = lps
		}
	case 43:
		{
			parser.yyVAL.item = nil
		}
	case 45:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 46:
		{
			parser.yyVAL.item = nil
		}
	case 48:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 49:
		{
			parser.yyVAL.item = []*ast.PropertyAssignment{yyS[yypt-0].item.(*ast.PropertyAssignment)}
		}
	case 50:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PropertyAssignment), yyS[yypt-0].item.(*ast.PropertyAssignment))
		}
	case 51:
		{
			parser.yyVAL.item = &ast.PropertyAssignment{
				PropertyAccess:  yyS[yypt-2].expr.(*ast.PropertyAccess),
				ValueExpression: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 52:
		{
			parser.yyVAL.expr = &ast.PropertyAccess{
				VariableName: yyS[yypt-2].item.(model.CIStr),
				PropertyName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 74:
		{
			parser.yyVAL.expr = &ast.VariableReference{
				VariableName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 82:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].ident)
		}
	case 83:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 84:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 85:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 86:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 87:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 88:
		{
			parser.yyVAL.expr = ast.NewValueExpr(false)
		}
	case 89:
		{
			parser.yyVAL.expr = ast.NewValueExpr(true)
		}
	case 90:
		{
			d, err := datum.ParseDate(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(d)
		}
	case 91:
		{
			t, ttz, err := datum.ParseTimeOrTimeTZ(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			if t != nil {
				parser.yyVAL.expr = ast.NewValueExpr(t)
			} else {
				parser.yyVAL.expr = ast.NewValueExpr(ttz)
			}
		}
	case 92:
		{
			t, ttz, err := datum.ParseTimestampOrTimestampTZ(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			if t != nil {
				parser.yyVAL.expr = ast.NewValueExpr(t)
			} else {
				parser.yyVAL.expr = ast.NewValueExpr(ttz)
			}
		}
	case 93:
		{
			parser.yyVAL.expr = ast.NewValueExpr(datum.NewInterval(yyS[yypt-1].item.(int64), yyS[yypt-0].item.(datum.IntervalUnit)))
		}
	case 94:
		{
			parser.yyVAL.item = datum.IntervalUnitYear
		}
	case 95:
		{
			parser.yyVAL.item = datum.IntervalUnitMonth
		}
	case 96:
		{
			parser.yyVAL.item = datum.IntervalUnitDay
		}
	case 97:
		{
			parser.yyVAL.item = datum.IntervalUnitHour
		}
	case 98:
		{
			parser.yyVAL.item = datum.IntervalUnitMinute
		}
	case 99:
		{
			parser.yyVAL.item = datum.IntervalUnitSecond
		}
	case 100:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 101:
		{
			parser.yyVAL.expr = &ast.UnaryExpr{Op: opcode.Minus, V: yyS[yypt-0].expr}
		}
	case 102:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.Mul, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 103:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.Div, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 104:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.Mod, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 105:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.Plus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 106:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.Minus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 107:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.EQ, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 108:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.NE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 109:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.GT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 110:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.LT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 111:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.GE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 112:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.LE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 113:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.LogicOr, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 114:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.LogicXor, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 115:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.LogicAnd, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 116:
		{
			v, ok := yyS[yypt-0].expr.(*ast.ExistsSubqueryExpr)
			if ok {
				v.Not = true
				parser.yyVAL.expr = yyS[yypt-0].expr
			} else {
				parser.yyVAL.expr = &ast.UnaryExpr{Op: opcode.Not, V: yyS[yypt-0].expr}
			}
		}
	case 117:
		{
			parser.yyVAL.expr = &ast.BinaryExpr{Op: opcode.Concat, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 118:
		{
			parser.yyVAL.expr = &ast.ParenthesesExpr{Expr: yyS[yypt-1].expr}
		}
	case 119:
		{
			parser.yyVAL.expr = &ast.FuncCallExpr{
				FnName: model.NewCIStr(yyS[yypt-3].ident),
				Args:   yyS[yypt-1].item.([]ast.ExprNode),
			}
		}
	case 136:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 137:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 138:
		{
			parser.yyVAL.expr = &ast.SubstrFuncExpr{
				Expr:  yyS[yypt-4].expr,
				Start: yyS[yypt-2].expr,
				For:   yyS[yypt-1].expr,
			}
		}
	case 140:
		{
			parser.yyVAL.expr = nil
		}
	case 141:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 142:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F: yyS[yypt-3].ident,
				Args: []ast.ExprNode{
					ast.NewValueExpr(1),
				},
			}
		}
	case 143:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 144:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 145:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 146:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 147:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 148:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 149:
		{
			expr := &ast.AggregateFuncExpr{
				F:        yyS[yypt-5].ident,
				Args:     []ast.ExprNode{yyS[yypt-2].expr},
				Distinct: yyS[yypt-3].item.(bool),
			}
			if yyS[yypt-1].expr != nil {
				expr.Args = append(expr.Args, yyS[yypt-1].expr)
			}
			parser.yyVAL.expr = expr
		}
	case 150:
		{
			parser.yyVAL.item = false
		}
	case 151:
		{
			parser.yyVAL.item = true
		}
	case 152:
		{
			parser.yyVAL.expr = nil
		}
	case 153:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 154:
		{
			parser.yyVAL.expr = &ast.ExtractFuncExpr{
				ExtractField: yyS[yypt-3].item.(ast.ExtractField),
				Expr:         yyS[yypt-1].expr,
			}
		}
	case 155:
		{
			parser.yyVAL.item = ast.ExtractFieldYear
		}
	case 156:
		{
			parser.yyVAL.item = ast.ExtractFieldMonth
		}
	case 157:
		{
			parser.yyVAL.item = ast.ExtractFieldDay
		}
	case 158:
		{
			parser.yyVAL.item = ast.ExtractFieldHour
		}
	case 159:
		{
			parser.yyVAL.item = ast.ExtractFieldMinute
		}
	case 160:
		{
			parser.yyVAL.item = ast.ExtractFieldSecond
		}
	case 161:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneHour
		}
	case 162:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneMinute
		}
	case 163:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-2].expr,
			}
		}
	case 164:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-3].expr,
				Not:  true,
			}
		}
	case 165:
		{
			parser.yyVAL.expr = &ast.CastFuncExpr{
				Expr:     yyS[yypt-3].expr,
				DataType: yyS[yypt-1].item.(ast.DataType),
			}
		}
	case 166:
		{
			parser.yyVAL.item = ast.DataTypeString
		}
	case 167:
		{
			parser.yyVAL.item = ast.DataTypeBoolean
		}
	case 168:
		{
			parser.yyVAL.item = ast.DataTypeInteger
		}
	case 169:
		{
			parser.yyVAL.item = ast.DataTypeFloat
		}
	case 170:
		{
			parser.yyVAL.item = ast.DataTypeDouble
		}
	case 171:
		{
			parser.yyVAL.item = ast.DataTypeDecimal
		}
	case 172:
		{
			parser.yyVAL.item = ast.DataTypeDate
		}
	case 173:
		{
			parser.yyVAL.item = ast.DataTypeTime
		}
	case 174:
		{
			parser.yyVAL.item = ast.DataTypeTimeWithTimeZone
		}
	case 175:
		{
			parser.yyVAL.item = ast.DataTypeTimestamp
		}
	case 176:
		{
			parser.yyVAL.item = ast.DataTypeTimestampWithTimeZone
		}
	case 179:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				Value:       yyS[yypt-3].expr,
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 180:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 181:
		{
			parser.yyVAL.item = []*ast.WhenClause{yyS[yypt-0].item.(*ast.WhenClause)}
		}
	case 182:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.WhenClause), yyS[yypt-0].item.(*ast.WhenClause))
		}
	case 183:
		{
			parser.yyVAL.item = &ast.WhenClause{
				Expr:   yyS[yypt-2].expr,
				Result: yyS[yypt-0].expr,
			}
		}
	case 184:
		{
			parser.yyVAL.expr = nil
		}
	case 185:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 186:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-2].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
			}
		}
	case 187:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-3].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
				Not:  true,
			}
		}
	case 188:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 189:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 190:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 191:
		{
			parser.yyVAL.expr = &ast.ExistsSubqueryExpr{
				Sel: yyS[yypt-0].expr,
			}
		}
	case 192:
		{
			parser.yyVAL.expr = &ast.SubqueryExpr{
				Query: yyS[yypt-1].statement.(*ast.SelectStmt),
			}
		}
	case 195:
		{
			ss := &ast.SelectStmt{
				Select: yyS[yypt-6].item.(*ast.SelectClause),
				From:   yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-7].item != nil {
				ss.PathPatternMacros = yyS[yypt-7].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ss.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ss.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ss.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ss.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ss.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ss
		}
	case 196:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Distinct: yyS[yypt-1].item.(bool),
				Elements: yyS[yypt-0].item.([]*ast.SelectElement),
			}
		}
	case 197:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Star: true,
			}
		}
	case 198:
		{
			parser.yyVAL.item = []*ast.SelectElement{yyS[yypt-0].item.(*ast.SelectElement)}
		}
	case 199:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.SelectElement), yyS[yypt-0].item.(*ast.SelectElement))
		}
	case 200:
		{
			parser.yyVAL.item = &ast.SelectElement{
				ExpAsVar: yyS[yypt-0].item.(*ast.ExpAsVar),
			}
		}
	case 201:
		{
			parser.yyVAL.item = &ast.SelectElement{
				Identifier: yyS[yypt-2].ident,
				Prefix:     yyS[yypt-0].item.(string),
			}
		}
	case 202:
		{
			ev := &ast.ExpAsVar{
				Expr: yyS[yypt-1].expr.(ast.ExprNode),
			}
			if yyS[yypt-0].item != nil {
				ev.AsName = yyS[yypt-0].item.(model.CIStr)
			}
			parser.yyVAL.item = ev
		}
	case 203:
		{
			parser.yyVAL.item = ""
		}
	case 204:
		{
			parser.yyVAL.item = yyS[yypt-1].ident
		}
	case 205:
		{
			parser.yyVAL.item = nil
		}
	case 206:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 207:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 208:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 209:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
		}
	case 210:
		{
			parser.yyVAL.item = nil
		}
	case 211:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
		}
	case 212:
		{
			parser.yyVAL.item = &ast.MatchClauseList{
				Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)},
			}
		}
	case 213:
		{
			ml := yyS[yypt-2].item.(*ast.MatchClauseList)
			ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
			parser.yyVAL.item = ml
		}
	case 214:
		{
			mc := &ast.MatchClause{
				Paths: yyS[yypt-2].item.([]*ast.PathPattern),
			}
			if yyS[yypt-1].item != nil {
				mc.Graph = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = mc
		}
	case 215:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 216:
		{
			parser.yyVAL.item = nil
		}
	case 219:
		{
			parser.yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
		}
	case 220:
		{
			parser.yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
		}
	case 221:
		{
			parser.yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
		}
	case 222:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
		}
	case 223:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternSimple
			parser.yyVAL.item = pp
		}
	case 224:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAny
			parser.yyVAL.item = pp
		}
	case 225:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyShortest
			parser.yyVAL.item = pp
		}
	case 226:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllShortest
			parser.yyVAL.item = pp
		}
	case 227:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKShortest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 228:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyCheapest
			parser.yyVAL.item = pp
		}
	case 229:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllCheapest
			parser.yyVAL.item = pp
		}
	case 230:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKCheapest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 231:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAll
			parser.yyVAL.item = pp
		}
	case 232:
		{
			parser.yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
		}
	case 233:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
			parser.yyVAL.item = pp
		}
	case 234:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
			parser.yyVAL.item = pp
		}
	case 235:
		{
			parser.yyVAL.item = &ast.PathPattern{
				Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
				Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
			}
		}
	case 236:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionOutgoing,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 237:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionIncoming,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 238:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionAnyDirected,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 239:
		{
			parser.yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
		}
	case 240:
		{
			parser.yyVAL.item = (*ast.VertexPattern)(nil)
		}
	case 242:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionOutgoing,
			}
		}
	case 243:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
		}
	case 244:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionIncoming,
			}
		}
	case 245:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
		}
	case 246:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionAnyDirected,
			}
		}
	case 247:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
		}
	case 248:
		{
			v := &ast.VariableSpec{
				Name:   yyS[yypt-1].item.(model.CIStr),
				Labels: yyS[yypt-0].item.([]model.CIStr),
			}
			if v.Name.L == "" {
				v.Anonymous = true
			}
			parser.yyVAL.item = v
		}
	case 249:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 250:
		{
			parser.yyVAL.item = model.CIStr{}
		}
	case 252:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 253:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 254:
		{
			parser.yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
		}
	case 255:
		{
			parser.yyVAL.item = []model.CIStr(nil)
		}
	case 259:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 260:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 261:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 262:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 263:
		{
			parser.yyVAL.item = &ast.QuantifiedPathExpr{
				Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
				Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
			}
		}
	case 264:
		{
			q := &ast.QuantifiedPathExpr{
				Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
				Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
				Source:      yyS[yypt-6].item.(*ast.VertexPattern),
				Destination: yyS[yypt-4].item.(*ast.VertexPattern),
			}
			if yyS[yypt-3].item != nil {
				q.Where = yyS[yypt-3].item.(ast.ExprNode)
			}
			if yyS[yypt-2].item != nil {
				q.Cost = yyS[yypt-2].item.(ast.ExprNode)
			}
			parser.yyVAL.item = q
		}
	case 265:
		{
			parser.yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
		}
	case 266:
		{
			parser.yyVAL.item = nil
		}
	case 268:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: math.MaxInt64}
		}
	case 269:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: math.MaxInt64}
		}
	case 270:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
		}
	case 271:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 272:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(int64), M: math.MaxInt64}
		}
	case 273:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 274:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(int64)}
		}
	case 275:
		{
			parser.yyVAL.item = (*ast.PatternQuantifier)(nil)
		}
	case 277:
		{
			parser.yyVAL.item = nil
		}
	case 279:
		{
			parser.yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
		}
	case 280:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
		}
	case 281:
		{
			p := &ast.PathPatternMacro{
				Name: model.NewCIStr(yyS[yypt-3].ident),
				Path: yyS[yypt-1].item.(*ast.PathPattern),
			}
			if yyS[yypt-0].item != nil {
				p.Where = yyS[yypt-0].item.(ast.ExprNode)
			}
			parser.yyVAL.item = p
		}
	case 282:
		{
			parser.yyVAL.item = nil
		}
	case 283:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 284:
		{
			parser.yyVAL.item = nil
		}
	case 285:
		{
			parser.yyVAL.item = &ast.GroupByClause{Items: yyS[yypt-0].item.([]*ast.ByItem)}
		}
	case 286:
		{
			parser.yyVAL.item = []*ast.ByItem{yyS[yypt-0].item.(*ast.ByItem)}
		}
	case 287:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.ByItem), yyS[yypt-0].item.(*ast.ByItem))
		}
	case 288:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr:      yyS[yypt-0].item.(*ast.ExpAsVar),
				NullOrder: true,
			}
		}
	case 289:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr: yyS[yypt-1].item.(*ast.ExpAsVar),
				Desc: yyS[yypt-0].item.(bool),
			}
		}
	case 290:
		{
			parser.yyVAL.item = false
		}
	case 291:
		{
			parser.yyVAL.item = true
		}
	case 292:
		{
			parser.yyVAL.item = nil
		}
	case 293:
		{
			parser.yyVAL.item = &ast.HavingClause{
				Expr: yyS[yypt-0].expr,
			}
		}
	case 294:
		{
			parser.yyVAL.item = nil
		}
	case 295:
		{
			parser.yyVAL.item = &ast.OrderByClause{
				Items: yyS[yypt-0].item.([]*ast.ByItem),
			}
		}
	case 296:
		{
			parser.yyVAL.item = nil
		}
	case 297:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count: yyS[yypt-0].expr,
			}
		}
	case 298:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-0].expr.(ast.ExprNode),
				Offset: yyS[yypt-2].expr.(ast.ExprNode),
			}
		}
	case 299:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-2].expr.(ast.ExprNode),
				Offset: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 301:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 302:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 303:
		{
			us := &ast.UpdateStmt{
				Updates: yyS[yypt-6].item.([]*ast.GraphElementUpdate),
				From:    yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				us.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				us.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				us.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				us.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				us.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				us.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = us
		}
	case 304:
		{
			parser.yyVAL.item = []*ast.GraphElementUpdate{yyS[yypt-0].item.(*ast.GraphElementUpdate)}
		}
	case 305:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementUpdate), yyS[yypt-0].item.(*ast.GraphElementUpdate))
		}
	case 306:
		{
			parser.yyVAL.item = &ast.GraphElementUpdate{
				VariableName: yyS[yypt-4].item.(model.CIStr),
				Assignments:  yyS[yypt-1].item.([]*ast.PropertyAssignment),
			}
		}
	case 307:
		{
			parser.yyVAL.statement = &ast.UseStmt{
				GraphName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 308:
		{
			parser.yyVAL.statement = &ast.ShowStmt{
				Tp: ast.ShowTargetGraphs,
			}
		}
	case 309:
		{
			parser.yyVAL.statement = &ast.ShowStmt{
				Tp: ast.ShowTargetLabels,
			}
		}
	case 310:
		{
			parser.yyVAL.statement = &ast.ShowStmt{
				Tp:        ast.ShowTargetLabels,
				GraphName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 311:
		{
			parser.yyVAL.item = false
		}
	case 312:
		{
			parser.yyVAL.item = true
		}
	case 313:
		{
			parser.yyVAL.item = false
		}
	case 314:
		{
			parser.yyVAL.item = true
		}
	case 315:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 316:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 317:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 318:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 363:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 364:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}

	}

	if !parser.lexer.skipPositionRecording {
		yySetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
